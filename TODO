TODO:
 - preloading images?
	- create an image tag "new Image()" then set it's .src, and bam, it'll be cached. See: http://stackoverflow.com/questions/8450068/is-there-a-way-to-load-images-to-users-cache-asynchronously/8450190#8450190
 - add an end. Let the user define what the end looks like when we call moreResults
	- if more results returns length 0, then show the end.
		- do this in the scroll callback, only if we haven't changed anything, even though we tried to. Maybe only the second time... becuase we need to wait for the callback?
 - I need to try and clean up any and all duplicate code and make my code look very nice and documented
	 - remove self. We shouldn just reorganize out code so this is always in context.
 - rename the options so they are more intelligent.
 - if an option is a function, it neeeds to take a parameter, or be transformed back to a string option, NOT a function option.
 - release?
	- first clean up ALL TODOs
	- next make sure there isn't any brandicted stuff lieing around in it.
 - save the scroll data to local storage or something, so when the user comes back to the page, we immediately load exactly where they were and scroll them to that position.
	- store the results we've loaded and the scroll position.
	- google if anyone has solved "scroll position reloading infinite scroll"
 - we need a way to ensure dataTobuffer is always more than tilesTOBuffer... or have a more intelligent way to keep these consistent.
 - load more at index from url or data. May be future scope.
 - no options should be functions, unless they are a callback... all the text options should be text, not functions.
 - for the reset method, add animations to jump or move the squares in a neat fashion. Or maybe just fade in fade out or something.
 - make a generic jquery plugin that does all the method jazz for us.
 - (IF we are loading too much and therefor need to load less, then white space is another good solution for this problem, see following:)add lots of empty space in the div, so we won't reach the end as easily and end up scrolling the page instead! Great idea!

(note, didn't actually get started till 11:50... stupid apis... they all are too gungho about security and won't let me access them client side.)
