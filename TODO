TODO:
 - During reset, how do I catch up on where the user was before?
	if they were on index 120, and the count increased by 30, then we should load to 150 and scroll them to whereever they were last?
	- I need to seperate away the data loading of more results.
	- I also need to separate the div creation
	- then just keep calling more results until we've reached our quota, while keeping track of our old data
	- after each callback, we can call the div creation, that would check old data (calling insertBefores or some such)
		- if this ends up being slow, we could add a check if where we are inserting is the same div, don't insert it. 
 - remove self. We shouldn just reorganize out code so this is always in context.
 - add an end. Let the user define what the end looks like when we call moreResults
	- if more results returns length 0, then show the end.
 - save the scroll data to local storage or something, so when the user comes back to the page, we immediately load exactly where they were and scroll them to that position.
	- store the results we've loaded and the scroll position.
	- google if anyone has solved "scroll position reloading infinite scroll"
 - preloading images?
	- create an image tag "new Image()" then set it's .src, and bam, it'll be cached. See: http://stackoverflow.com/questions/8450068/is-there-a-way-to-load-images-to-users-cache-asynchronously/8450190#8450190
 - load more at index from url or data. May be future scope.
 - for the reset method, add animations to jump or move the squares in a neat fashion. Or maybe just fade in fade out or something.
 - make a generic jquery plugin that does all the method jazz for us.
 - (IF we are loading too much and therefor need to load less, then white space is another good solution for this problem, see following:)add lots of empty space in the div, so we won't reach the end as easily and end up scrolling the page instead! Great idea!

(note, didn't actually get started till 11:50... stupid apis... they all are too gungho about security and won't let me access them client side.)
